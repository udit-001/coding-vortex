# Generated by Django 2.2.5 on 2019-09-30 18:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit_selectize.managers
import tinymce.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('uploads', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, help_text="Author's name as it will appear to their audience", max_length=200, null=True)),
                ('short_description', models.CharField(help_text="Short info that might be used to describe author's job position or speciality.", max_length=50)),
                ('bio', models.TextField(help_text="Longer info where they can describe author's hobbies, ideas and experience.")),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='A unique uuid auto generated used to identify each author.')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('display_name',),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the category.', max_length=20)),
                ('slug', models.SlugField(help_text='A unique "slug" consisting of letters, numbers, underscores or hyphens', unique=True)),
                ('is_main', models.BooleanField(default=False, help_text='Whether the category should be displayed in the main menu', verbose_name='Is Main Menu Item')),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the blog post.', max_length=100)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('slug', models.SlugField(help_text='A unique "slug" consisting of letters, numbers, underscores or hyphens', max_length=255, unique=True)),
                ('overview', models.CharField(help_text='A short description about the blog post.', max_length=200)),
                ('content', tinymce.models.HTMLField(help_text='Content of the post, including the markup.')),
                ('is_published', models.BooleanField(default=False, help_text='Whether the post is visible on the blog or not')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='posts.Author')),
                ('category', models.ForeignKey(blank=True, help_text='The category the blog post should be displayed under', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='posts.Category')),
                ('featured_image', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='uploads.ImageUpload')),
                ('tags', taggit_selectize.managers.TaggableManager(help_text='\u200b\u200b\u200b\u200bAn array of strings that represent tags for the post. ', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['published_date'],
            },
        ),
    ]
